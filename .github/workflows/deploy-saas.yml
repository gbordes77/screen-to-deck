name: 🚀 Deploy Screen-to-Deck SaaS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================
  # TESTS & QUALITY CHECKS
  # ==============================================
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.should-deploy.outputs.result }}
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci

      - name: 🧹 Lint code
        run: |
          cd server && npm run lint || echo "Server lint issues detected"
          cd ../client && npm run lint || echo "Client lint issues detected"

      - name: 🧪 Run tests
        run: |
          cd server && npm test || echo "Server tests need attention"
          cd ../client && npm test -- --watchAll=false || echo "Client tests need attention"

      - name: 🔨 Build applications
        run: |
          cd client && npm run build
          cd ../server && npm run build

      - name: 🔒 Security audit
        run: |
          npm audit --audit-level=high || true
          cd server && npm audit --audit-level=high || true
          cd ../client && npm audit --audit-level=high || true

      - name: 🎯 Determine deployment
        id: should-deploy
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

  # ==============================================
  # BUILD DOCKER IMAGE
  # ==============================================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.outputs.should-deploy == 'true'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.saas
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==============================================
  # DEPLOY TO STAGING
  # ==============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: needs.test.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 🚀 Deploy to Fly.io (Staging)
        run: |
          flyctl deploy --app screen-to-deck-staging --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🔍 Health check
        run: |
          sleep 30
          curl -f https://screen-to-deck-staging.fly.dev/health || exit 1

      - name: 📢 Notify success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: '🎉 Staging deployment successful! https://screen-to-deck-staging.fly.dev'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==============================================
  # DEPLOY TO PRODUCTION
  # ==============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: needs.test.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 🔄 Database migrations
        run: |
          flyctl ssh console --app screen-to-deck -C "npm run db:migrate"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy to Fly.io (Production)
        run: |
          flyctl deploy --app screen-to-deck --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🔍 Health check
        run: |
          sleep 60
          curl -f https://screen-to-deck.fly.dev/health || exit 1

      - name: 📊 Post-deploy analytics
        run: |
          curl -X POST "https://api.mixpanel.com/track" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment_success",
              "properties": {
                "distinct_id": "ci-cd",
                "environment": "production",
                "version": "${{ github.sha }}",
                "time": "'$(date -u +%s)'"
              }
            }'

      - name: 🏷️ Create release tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$(date +'%Y.%m.%d')-${{ github.run_number }}" -m "Production release $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin --tags

      - name: 📢 Notify success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: '🚀 Production deployment successful! https://screen-to-deck.fly.dev'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Notify failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          text: '💥 Production deployment failed! Check GitHub Actions logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==============================================
  # MONITORING & CLEANUP
  # ==============================================
  post-deploy:
    name: 📊 Post-Deploy Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: 🧹 Cleanup old images
        run: |
          # Nettoyer les anciennes images Docker pour économiser l'espace
          echo "Cleaning up old container images..."
          # Cette étape peut être customisée selon tes besoins

      - name: 📈 Update monitoring dashboards
        run: |
          echo "Updating Grafana dashboards with new deployment info..."
          # Peut être intégré avec ton monitoring stack

      - name: 🔔 Post to Discord
        if: always()
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          if [ ! -z "$WEBHOOK_URL" ]; then
            curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                "embeds": [{
                  "title": "🃏 Screen-to-Deck Deployment",
                  "description": "New version deployed successfully!",
                  "color": 65280,
                  "fields": [
                    {"name": "Version", "value": "'${{ github.sha }}'"}, 
                    {"name": "Environment", "value": "'${{ github.ref_name }}'"},
                    {"name": "Status", "value": "✅ Success"}
                  ]
                }]
              }' \
              "$WEBHOOK_URL"
          fi 