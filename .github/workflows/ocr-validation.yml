name: OCR Validation Suite

on:
  push:
    branches: [main, develop]
    paths:
      - 'server/src/services/**'
      - 'discord-bot/**'
      - 'tests/**'
      - 'test-images/**'
  pull_request:
    branches: [main]
    paths:
      - 'server/src/services/**'
      - 'discord-bot/**'
      - 'tests/**'
      - 'test-images/**'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_subset:
        description: 'Test subset to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - mtga
          - mtgo
          - performance

jobs:
  validate-ocr:
    name: Validate OCR Accuracy
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        python-version: [3.9, '3.10']
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Node Dependencies
        run: |
          npm ci
          cd server && npm ci
          cd ../client && npm ci
      
      - name: 🐍 Install Python Dependencies
        run: |
          cd discord-bot
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: 🔑 Setup Environment Variables
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
      
      - name: 📥 Download Test Images
        run: |
          # Download test images from artifact storage or LFS
          mkdir -p test-images/mtga test-images/mtgo
          # This would normally download from artifact storage
          echo "Test images should be in LFS or artifact storage"
      
      - name: 🧪 Run Validation Tests
        id: test
        run: |
          # Run based on input or all tests
          TEST_SUBSET="${{ github.event.inputs.test_subset || 'all' }}"
          
          if [ "$TEST_SUBSET" = "all" ] || [ "$TEST_SUBSET" = "mtga" ]; then
            npm test -- --testNamePattern="MTGA" --coverage
          fi
          
          if [ "$TEST_SUBSET" = "all" ] || [ "$TEST_SUBSET" = "mtgo" ]; then
            npm test -- --testNamePattern="MTGO" --coverage
          fi
          
          if [ "$TEST_SUBSET" = "all" ] || [ "$TEST_SUBSET" = "performance" ]; then
            npm test -- --testNamePattern="Performance" --coverage
          fi
      
      - name: 📊 Generate Coverage Report
        if: always()
        run: |
          npm run test:coverage
          
      - name: 📈 Upload Coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: ocr-validation
      
      - name: 📁 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.python-version }}
          path: |
            test-results/*.html
            test-results/*.json
            coverage/
      
      - name: 💬 Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test results
            const resultsDir = 'test-results';
            const files = fs.readdirSync(resultsDir);
            const jsonFile = files.find(f => f.endsWith('.json'));
            
            if (jsonFile) {
              const results = JSON.parse(fs.readFileSync(path.join(resultsDir, jsonFile), 'utf8'));
              const { summary } = results;
              
              const comment = `
## 🎯 OCR Validation Results

| Metric | Value |
|--------|-------|
| **Total Tests** | ${summary.totalTests} |
| **Passed** | ${summary.passed} ✅ |
| **Failed** | ${summary.failed} ❌ |
| **Overall Accuracy** | ${summary.overallAccuracy.toFixed(2)}% |
| **Avg Processing Time** | ${(summary.avgProcessingTime / 1000).toFixed(2)}s |

### Test Matrix
- Node.js: ${{ matrix.node-version }}
- Python: ${{ matrix.python-version }}

[View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
      
      - name: 🚨 Notify on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'OCR Validation Tests Failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: validate-ocr
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      - name: 📦 Install Dependencies
        run: npm ci
      
      - name: 🏃 Run Benchmarks
        run: |
          npm run test:benchmark
      
      - name: 📊 Store Benchmark Results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'customBiggerIsBetter'
          output-file-path: test-results/benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: '110%'
          comment-on-alert: true
          fail-on-alert: false

  deploy-report:
    name: Deploy Test Report
    runs-on: ubuntu-latest
    needs: validate-ocr
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: 🌐 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./artifacts
          publish_branch: gh-pages
          destination_dir: test-reports/${{ github.run_number }}
      
      - name: 📢 Update Status Badge
        run: |
          echo "Test report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/${{ github.run_number }}/"