name: 🚀 Deploy Screen-to-Deck

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # 🧪 Tests parallèles
  test-frontend:
    name: 🎨 Test Frontend (React/Vite)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install dependencies
        run: |
          cd client
          npm ci
      
      - name: Lint & Type Check
        run: |
          cd client
          npm run lint
          npm run type-check
      
      - name: Build
        run: |
          cd client
          npm run build

  test-backend:
    name: 🖥️ Test Backend (Node.js/TS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install dependencies
        run: |
          cd server
          npm ci
      
      - name: Lint & Type Check
        run: |
          cd server
          npm run lint
          npm run type-check
      
      - name: Build
        run: |
          cd server
          npm run build
      
      - name: Test API Routes
        run: |
          cd server
          npm test

  test-ocr-pipeline:
    name: 🔍 Test OCR Pipeline
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: discord-bot/requirements.txt
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install Python dependencies
        run: |
          cd discord-bot
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
      
      - name: Install Node.js dependencies  
        run: |
          cd server
          npm ci
      
      - name: Test Enhanced OCR Architecture
        run: |
          chmod +x scripts/test-enhanced-ocr.sh
          ./scripts/test-enhanced-ocr.sh

  # 🔒 Security scan
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 🐳 Build Docker
  build:
    name: 🐳 Build & Push Docker
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ocr-pipeline]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gbordes77/screen-to-deck
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.saas
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy Staging
  deploy-staging:
    name: 🧪 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # 🌟 Deploy Production  
  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh production
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # 📊 Post-deploy monitoring
  post-deploy:
    name: 📊 Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success')
    steps:
      - uses: actions/checkout@v4
      
      - name: Health Check & Metrics
        run: |
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh production
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # 📢 Notifications
  notify:
    name: 📢 Notify Deploy Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            🚀 **Screen-to-Deck Deployment** 
            
            **Environment:** ${{ github.ref == 'refs/heads/main' && '🌟 Production' || '🧪 Staging' }}
            **Status:** ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
            **Commit:** `${{ github.sha }}`
            **Branch:** `${{ github.ref_name }}`
            **Actor:** ${{ github.actor }}
            
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) 