name: E2E Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  web-service-tests:
    name: Web Service E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install dependencies
      run: |
        cd server
        npm ci
        
    - name: Run E2E tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NODE_ENV: test
      run: |
        cd server
        npm run test:integration:runner
        
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: web-service-reports
        path: server/tests/integration/reports/
        retention-days: 30
        
    - name: Upload coverage reports
      if: success()
      uses: codecov/codecov-action@v3
      with:
        files: server/coverage/lcov.info
        flags: web-service
        
  discord-bot-tests:
    name: Discord Bot E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: discord-bot/requirements.txt
        
    - name: Install dependencies
      run: |
        cd discord-bot
        pip install -r requirements.txt
        
    - name: Run E2E tests
      env:
        PYTHONPATH: ${{ github.workspace }}/discord-bot
      run: |
        cd discord-bot
        python tests/test_e2e_real.py
        
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: discord-bot-reports
        path: discord-bot/tests/reports/
        retention-days: 30
        
  comparison-report:
    name: Generate Comparison Report
    needs: [web-service-tests, discord-bot-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download web service reports
      uses: actions/download-artifact@v4
      with:
        name: web-service-reports
        path: web-reports/
        
    - name: Download Discord bot reports
      uses: actions/download-artifact@v4
      with:
        name: discord-bot-reports
        path: bot-reports/
        
    - name: Generate comparison
      run: |
        echo "# E2E Test Comparison Report" > comparison.md
        echo "" >> comparison.md
        echo "## Web Service Results" >> comparison.md
        if [ -f "web-reports/report-*.json" ]; then
          cat web-reports/report-*.json | jq '.summary' >> comparison.md
        fi
        echo "" >> comparison.md
        echo "## Discord Bot Results" >> comparison.md
        if [ -f "bot-reports/discord_bot_report_*.json" ]; then
          cat bot-reports/discord_bot_report_*.json | jq '.summary' >> comparison.md
        fi
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const comparison = fs.readFileSync('comparison.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comparison
          });
          
    - name: Upload comparison report
      uses: actions/upload-artifact@v4
      with:
        name: comparison-report
        path: comparison.md
        retention-days: 30
        
  quality-gate:
    name: Quality Gate Check
    needs: [web-service-tests, discord-bot-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download reports
      uses: actions/download-artifact@v4
      
    - name: Check quality gates
      run: |
        # Parse test results and check quality gates
        WEB_SUCCESS=true
        BOT_SUCCESS=true
        
        # Check web service results
        if [ -f "web-service-reports/report-*.json" ]; then
          SUCCESS_RATE=$(cat web-service-reports/report-*.json | jq '.summary.successRate')
          if (( $(echo "$SUCCESS_RATE < 100" | bc -l) )); then
            echo "❌ Web service success rate below 100%: $SUCCESS_RATE%"
            WEB_SUCCESS=false
          fi
        else
          echo "❌ Web service report not found"
          WEB_SUCCESS=false
        fi
        
        # Check Discord bot results
        if [ -f "discord-bot-reports/discord_bot_report_*.json" ]; then
          SUCCESS_RATE=$(cat discord-bot-reports/discord_bot_report_*.json | jq '.summary.success_rate')
          if (( $(echo "$SUCCESS_RATE < 100" | bc -l) )); then
            echo "❌ Discord bot success rate below 100%: $SUCCESS_RATE%"
            BOT_SUCCESS=false
          fi
        else
          echo "❌ Discord bot report not found"
          BOT_SUCCESS=false
        fi
        
        # Check 60+15 guarantee
        if [ -f "web-service-reports/report-*.json" ]; then
          ALL_60_15=$(cat web-service-reports/report-*.json | jq '.summary.all60_15')
          if [ "$ALL_60_15" != "true" ]; then
            echo "❌ Web service failed 60+15 guarantee"
            WEB_SUCCESS=false
          fi
        fi
        
        if [ -f "discord-bot-reports/discord_bot_report_*.json" ]; then
          ALL_60_15=$(cat discord-bot-reports/discord_bot_report_*.json | jq '.summary.all_60_15')
          if [ "$ALL_60_15" != "true" ]; then
            echo "❌ Discord bot failed 60+15 guarantee"
            BOT_SUCCESS=false
          fi
        fi
        
        # Final check
        if [ "$WEB_SUCCESS" = true ] && [ "$BOT_SUCCESS" = true ]; then
          echo "✅ All quality gates passed!"
          exit 0
        else
          echo "❌ Quality gates failed"
          exit 1
        fi
        
  notify-results:
    name: Notify Test Results
    needs: [quality-gate]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: Send notification
      if: failure()
      run: |
        echo "🚨 E2E tests failed! Check the workflow run for details."
        # Add notification logic here (Slack, Discord, email, etc.)
        
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `E2E Tests Failed - ${date}`,
            body: `The scheduled E2E tests failed. Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
            labels: ['bug', 'test-failure', 'automated']
          });