name: 🔄 Auto PR Management

on:
  push:
    branches-ignore:
      - main
      - develop
  schedule:
    - cron: '0 9 * * 1' # Tous les lundis à 9h
  workflow_dispatch:

jobs:
  # ===========================================
  # AUTO PULL REQUEST CREATION
  # ===========================================
  create-pr:
    name: 🔄 Create Auto PR
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check if PR exists
        id: check-pr
        run: |
          PR_EXISTS=$(gh pr list --head ${{ github.ref_name }} --json number --jq length)
          echo "pr_exists=$PR_EXISTS" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🆕 Create Pull Request
        if: steps.check-pr.outputs.pr_exists == '0'
        run: |
          # Déterminer la branche cible
          if [[ "${{ github.ref_name }}" == feature/* ]] || [[ "${{ github.ref_name }}" == bugfix/* ]]; then
            TARGET_BRANCH="develop"
          else
            TARGET_BRANCH="main"
          fi

          # Créer le PR avec un template
          gh pr create \
            --base $TARGET_BRANCH \
            --head ${{ github.ref_name }} \
            --title "🚀 Auto PR: ${{ github.ref_name }}" \
            --body "$(cat .github/PULL_REQUEST_TEMPLATE.md)" \
            --label "auto-created" \
            --assignee ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===========================================
  # DEPENDENCY UPDATES
  # ===========================================
  update-dependencies:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🔄 Update Client Dependencies
        working-directory: client
        run: |
          npm update
          npm audit fix --force || true

      - name: 🔄 Update Server Dependencies
        working-directory: server
        run: |
          npm update
          npm audit fix --force || true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔄 Update Discord Bot Dependencies
        working-directory: discord-bot
        run: |
          pip install --upgrade pip
          pip install pip-tools
          pip-compile --upgrade requirements.in
          pip install -r requirements.txt

      - name: 📝 Create PR for dependency updates
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            BRANCH_NAME="auto/dependency-updates-$(date +%Y%m%d)"
            git checkout -b $BRANCH_NAME
            git add .
            git commit -m "🔄 Auto: Update dependencies"
            git push origin $BRANCH_NAME
            
            gh pr create \
              --base develop \
              --head $BRANCH_NAME \
              --title "🔄 Auto: Dependency Updates $(date +%Y-%m-%d)" \
              --body "Automatic dependency updates generated by GitHub Actions" \
              --label "dependencies,auto-created"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # ===========================================
  # CODE QUALITY CHECKS
  # ===========================================
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📊 CodeClimate Coverage
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            ./client/coverage/lcov.info:lcov
            ./server/coverage/lcov.info:lcov

  # ===========================================
  # BRANCH CLEANUP
  # ===========================================
  cleanup-branches:
    name: 🧹 Cleanup Merged Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: 🧹 Delete merged branches
        run: |
          # Supprimer les branches mergées (sauf main et develop)
          git branch -r --merged origin/main | \
            grep -v 'origin/main\|origin/develop' | \
            sed 's/origin\///' | \
            xargs -I {} git push origin --delete {} || true

          # Nettoyer les références locales
          git remote prune origin 