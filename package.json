{
  "name": "screen-to-deck-saas",
  "version": "2.0.1",
  "description": "🃏 Screen-to-Deck SaaS - MTG Deck Scanner & Recognition Platform",
  "private": true,
  "workspaces": [
    "client",
    "server"
  ],
  "scripts": {
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\"", 
    "dev:selfhost": "concurrently \"npm run dev:server\" \"cd client && npm run dev -- --host 0.0.0.0\"",
    "dev:server": "cd server && npm run dev",
    "dev:client": "cd client && npm run dev",
    "build": "npm run build:client && npm run build:server",
    "build:client": "cd client && npm run build",
    "build:server": "cd server && npm run build",
    "test": "npm run test:client && npm run test:server",
    "test:client": "cd client && npm test -- --watchAll=false",
    "test:server": "cd server && npm test",
    "lint": "npm run lint:client && npm run lint:server",
    "lint:client": "cd client && npm run lint",
    "lint:server": "cd server && npm run lint",
    "lint:fix": "npm run lint:client -- --fix && npm run lint:server -- --fix",
    "docker:build": "docker build -f Dockerfile.saas -t screen-to-deck:latest .",
    "docker:run": "docker run -p 3001:3001 screen-to-deck:latest",
    "docker:prod": "docker-compose -f docker-compose.prod.yml up -d",
    "docker:stop": "docker-compose -f docker-compose.prod.yml down",
    "docker:logs": "docker-compose -f docker-compose.prod.yml logs -f",
    "supabase:start": "supabase start",
    "supabase:stop": "supabase stop",
    "supabase:status": "supabase status",
    "supabase:reset": "supabase db reset",
    "supabase:push": "supabase db push",
    "supabase:pull": "supabase db pull",
    "supabase:gen-types": "supabase gen types typescript --local > server/src/types/supabase.ts",
    "supabase:setup": "./scripts/setup-supabase.sh",
    "supabase:test": "node scripts/test-supabase-config.js",
    "infrastructure:setup": "./scripts/setup-infrastructure.sh",
    "infrastructure:deploy": "./scripts/deploy-complete.sh",
    "saas:quick-start": "./quick-start-saas.sh",
    "saas:migrate": "./scripts/saas-migration.sh",
    "check-prerequisites": "./scripts/check-prerequisites.sh",
    "fly:deploy": "flyctl deploy",
    "fly:deploy:staging": "flyctl deploy --app screen-to-deck-staging",
    "fly:logs": "flyctl logs",
    "fly:logs:staging": "flyctl logs --app screen-to-deck-staging",
    "fly:ssh": "flyctl ssh console",
    "railway:deploy": "railway up",
    "railway:logs": "railway logs",
    "railway:status": "railway status",
    "monitoring:up": "docker-compose -f docker-compose.prod.yml up prometheus grafana loki -d",
    "monitoring:down": "docker-compose -f docker-compose.prod.yml stop prometheus grafana loki",
    "backup:create": "./scripts/backup.sh create",
    "backup:restore": "./scripts/backup.sh restore",
    "backup:list": "./scripts/backup.sh list",
    "health:check": "curl -f http://localhost:3001/health || echo 'Service not available'",
    "health:check:prod": "curl -f https://screen-to-deck.fly.dev/health || echo 'Production not available'",
    "security:audit": "npm audit --audit-level=high",
    "security:fix": "npm audit fix",
    "performance:test": "cd client && npm run build && lighthouse http://localhost:3001 --output=json --output-path=./lighthouse-report.json",
    "clean": "npm run clean:client && npm run clean:server && npm run clean:docker",
    "clean:client": "cd client && rm -rf dist node_modules",
    "clean:server": "cd server && rm -rf dist node_modules",
    "clean:docker": "docker system prune -f && docker volume prune -f",
    "postinstall": "npm install --prefix server && npm install --prefix client"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "lighthouse": "^11.4.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/gbordes77/screen-to-deck.git"
  },
  "keywords": [
    "mtg",
    "magic-the-gathering",
    "ocr",
    "deck-scanner",
    "saas",
    "react",
    "nodejs",
    "supabase",
    "ai",
    "computer-vision"
  ],
  "author": "Your Name <your.email@example.com>",
  "license": "MIT",
  "funding": {
    "type": "github",
    "url": "https://github.com/sponsors/your-username"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.840.0"
  }
}
